using NLog;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace WorkloadTools.Consumer.Replay
{
    class ReplayWorker
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();

        private SqlConnection conn { get; set; }

        public SqlConnectionInfo ConnectionInfo { get; set; }

        public int ReplayIntervalSeconds { get; set; } = 0;
        public bool StopOnError { get; set; } = false;
        public string Name { get; set; }
        public int SPID { get; set; }

        private long commandCount = 0;

        public int CommandCount
        {
            [MethodImpl(MethodImplOptions.Synchronized)]
            get
            {
                return Commands.Count;
            }
        }

        private Queue<ReplayCommand> Commands = new Queue<ReplayCommand>();

        private void InitializeConnection()
        {
            logger.Info(String.Format("Worker [{0}] - Connecting to server {1} for replay...", Name, ConnectionInfo.ServerName));
            string connString = BuildConnectionString();
            conn = new SqlConnection(connString);
            conn.Open();
            logger.Info(String.Format("Worker [{0}] - Connected", Name));
        }

        private string BuildConnectionString()
        {
            string connectionString = "Data Source=" + ConnectionInfo.ServerName + ";";
            if (String.IsNullOrEmpty(ConnectionInfo.DatabaseName))
            {
                connectionString += "Initial Catalog = master; ";
            }
            else
            {
                connectionString += "Initial Catalog = " + ConnectionInfo.DatabaseName + "; ";
            }
            if (String.IsNullOrEmpty(ConnectionInfo.UserName))
            {
                connectionString += "Integrated Security = SSPI; ";
            }
            else
            {
                connectionString += "User Id = " + ConnectionInfo.UserName + "; ";
                connectionString += "Password = " + ConnectionInfo.Password + "; ";
            }
            connectionString += "Application Name=WorkloadTools;";
            return connectionString;
        }

        [MethodImpl(MethodImplOptions.Synchronized)]
        public void ExecuteNextCommand()
        {
            ReplayCommand cmd = GetNextCommand();
            if (cmd != null)
            {
                ExecuteCommand(cmd);
                commandCount++;
            }
        }


        [MethodImpl(MethodImplOptions.Synchronized)]
        public ReplayCommand GetNextCommand()
        {
            if (Commands.Count == 0)
            {
                return null;
            }
            return Commands.Dequeue();
        }


        [MethodImpl(MethodImplOptions.Synchronized)]
        public void ExecuteCommand(ReplayCommand command)
        {
            if (conn == null)
            {
                try
                {
                    InitializeConnection();
                }
                catch (SqlException se)
                {
                    logger.Error(se.Message);
                    logger.Error(String.Format("Worker [{0}] - Unable to acquire the connection. Quitting the ReplayWorker", Name));
                    return;
                }
            }


            while (conn.State == System.Data.ConnectionState.Connecting)
            {
                Thread.Sleep(5);
            }

            if ((conn.State == System.Data.ConnectionState.Closed) || (conn.State == System.Data.ConnectionState.Broken))
            {
                conn.Open();
            }

            try
            {
                if (conn.Database != command.Database)
                {
                    logger.Trace(String.Format("Worker [{0}] - Changing database to {1} ", Name, command.Database));
                    conn.ChangeDatabase(command.Database);
                }

                SqlCommand cmd = new SqlCommand(command.CommandText);
                cmd.Connection = conn;
                cmd.ExecuteNonQuery();

                logger.Trace(String.Format("Worker [{0}] - SUCCES - \n{1}", Name, command.CommandText));
                if (commandCount % 100 == 0)
                    logger.Info(String.Format("Worker [{0}] - {1} commands executed.", Name, commandCount.ToString()));
            }
            catch (Exception e)
            {
                if (StopOnError)
                {
                    logger.Error(String.Format("Worker[{0}] - Error: \n{1}", Name, command.CommandText));
                    throw;
                }
                else
                {
                    logger.Trace(String.Format("Worker [{0}] - Error: {1}", Name, command.CommandText));
                    logger.Warn(String.Format("Worker [{0}] - Error: {1}", Name, e.Message));
                    logger.Trace(e.StackTrace);
                }
            }
        }


        [MethodImpl(MethodImplOptions.Synchronized)]
        public void AppendCommand(ReplayCommand cmd)
        {
            Commands.Enqueue(cmd);
        }

        [MethodImpl(MethodImplOptions.Synchronized)]
        public void AppendCommand(string commandText, string databaseName)
        {
            Commands.Enqueue(new ReplayCommand() { CommandText = commandText, Database = databaseName });
        }

    }
}
